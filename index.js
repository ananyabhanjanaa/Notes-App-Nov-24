const express =  require('express');
const app = express();
const path = require('path');
const fs = require('fs');

app.set('view engine', 'ejs');
app.use(express.json());
app.use(express.urlencoded({extended:true}));
app.use(express.static(path.join(__dirname, 'public')));


app.get('/', function(req, res){
   ////readdir se files naam ke folder ka saara content show hoga on console, content of dir means uske andar ki files and subdirectories
   fs.readdir(`./files`, function(err, files){
      // console.log(files);
      res.render("index" , {files:files});
});
})

app.get('/file/:filename', function(req, res){

   // jab hum '/file/:filename' (eg-/file/example.txt) par click karte hai we will read the file.eg-> /file/example.txt will attempt to read example.txt.
   fs.readFile(`./files/${req.params.filename}`, "utf-8", function(err, filedata){
      //req.params.filename: Extracts the filename parameter from the URL. For example, if the URL is /file/example.txt, req.params.filename will be "example.txt".fs.readFile: This method reads the content of the specified file from the ./files directory.
      //"utf-8" specifies the encoding, meaning the file will be read as a UTF-8 encoded string. agar utf-8 mention nahi karege toh string form me display nahi hoga data balki buffer form me hoga which is unreadable

      res.render('show', {filename: req.params.filename, filedata:filedata});
      // we will go to show.ejs wali file and saath me we are sending file ka title in form of req.params.filename (from the route only) and note ka content in form of filedata, jo file ka data hum fs.readfile kar ke read kar rahe hai, vahi jaayfa filedata me
   })
})

app.get('/edit/:filename', function(req, res){
   res.render('edit', {filename: req.params.filename});
})
//This route allows users to rename a file on the server by sending a POST request to /edit (edit.ejs page me form action on submitting was going to /edit page with post method(update values)) with the old filename (previous) and the new filename (new) in the request body. After renaming the file, the user is redirected to the home page.
app.post('/edit', function(req, res)
{
   fs.rename(`./files/${req.body.previous}`, `./files/${req.body.new}`, function(err)
{
   res.redirect('/');
})
})
//Unlike the GET method, which is used to retrieve resources, the POST method is used to submit data to the server for processing.
//POST is used to send data to a server to create/update a resource.
app.post('/create', function(req, res){
   //In this code snippet, fs refers to Node.js’s file system module, which is used to interact with the file system. The directory where the file will be saved is specified as ./files/. The file name is dynamically generated by taking the title from the request body (req.body.title), splitting it into an array of words using .split(' '), removing any spaces by joining the array back into a single string with .join(''), and then appending .txt to this string. The content to be written into the file is provided by req.body.details. Thus, when the file is created, it will be saved in the ./files/ directory with the modified title as its name, and the file’s content will be derived from the details provided in the request body.
   //req.body is used to access data sent in the body of an HTTP request.
   
   fs.writeFile(`./files/${req.body.title.split(' ').join('')}.txt` , req.body.details, function(err){
      res.redirect("/");

      //res.redirect("/") is used to navigate the client to the root URL of your application
   })
})
app.listen(3000);